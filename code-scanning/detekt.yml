# 此工作流使用未经 GitHub 认证的操作。
# 它们由第三方提供，并受单独的服务条款、隐私政策和支持文档约束。

# 此工作流使用 Detekt 执行 Kotlin 源代码的静态分析。
#
# 触发扫描的条件：
# 1. 每次推送到默认和受保护分支时
# 2. 每次拉取请求以默认分支为目标时
# 3. 每周定期执行
# 4. 手动触发，通过 "workflow_dispatch" 事件

# 工作流应该在不需要修改的情况下运行，但您可能希望使用 $DETEKT_RELEASE_TAG 环境变量修改 Detekt CLI 的版本。
name: 使用 Detekt 进行扫描

on:
  # 在推送或拉取请求事件上触发工作流，但仅适用于默认和受保护分支
  push:
    branches: [ $default-branch, $protected-branches ]
  pull_request:
    branches: [ $default-branch ]
  schedule:
    - cron: $cron-weekly

  # 允许您从“操作”选项卡手动运行此工作流
  workflow_dispatch:

env:
  # 与要安装的 Detekt 版本相关联的发布标签
  # SARIF 支持（此工作流需要）是在 Detekt v1.15.0 中引入的
  DETEKT_RELEASE_TAG: v1.15.0

# 工作流运行由一个或多个作业组成，可以按顺序或并行运行
jobs:
  # 此工作流包含一个名为“scan”的作业
  scan:
    name: 扫描
    # 作业将运行在 ubuntu-latest 上
    runs-on: ubuntu-latest

    # 步骤表示将作为作业的一部分执行的一系列任务
    steps:
    # 检查存储库并将其检出到 $GITHUB_WORKSPACE，以便作业可以访问它
    - uses: actions/checkout@v3

    # 获取与 $DETEKT_RELEASE_TAG 相关联的下载 URL
    - name: 获取 Detekt 下载 URL
      id: detekt_info
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh api graphql --field tagName=$DETEKT_RELEASE_TAG --raw-field query='
          query getReleaseAssetDownloadUrl($tagName: String!) {
            repository(name: "detekt", owner: "detekt") {
              release(tagName: $tagName) {
                releaseAssets(name: "detekt", first: 1) {
                  nodes {
                    downloadUrl
                  }
                }
                tagCommit {
                  oid
                }
              }
            }
          }
        ' 1> gh_response.json

        DETEKT_RELEASE_SHA=$(jq --raw-output '.data.repository.release.releaseAssets.tagCommit.oid' gh_response.json)
        if [ $DETEKT_RELEASE_SHA != "37f0a1d006977512f1f216506cd695039607c3e5" ]; then
          echo "发布标签与预期的提交 SHA 不匹配"
          exit 1
        fi

        DETEKT_DOWNLOAD_URL=$(jq --raw-output '.data.repository.release.releaseAssets.nodes[0].downloadUrl' gh_response.json)
        echo "download_url=$DETEKT_DOWNLOAD_URL" >> $GITHUB_OUTPUT

    # 设置 detekt cli
    - name: 设置 Detekt
      run: |
        dest=$( mktemp -d )
        curl --request GET \
          --url ${{ steps.detekt_info.outputs.download_url }} \
          --silent \
          --location \
          --output $dest/detekt
        chmod a+x $dest/detekt
        echo $dest >> $GITHUB_PATH

    # 使用 Detekt 执行静态分析
    - name: 运行 Detekt
      continue-on-error: true
      run: |
        detekt --input ${{ github.workspace }} --report sarif:${{ github.workspace }}/detekt.sarif.json

    # 修改由 Detekt 产生的 SARIF 输出，以使绝对 URI 变为相对
    # 这样我们可以轻松地将结果映射到其源文件
    # 一旦 Detekt 支持相对 URI，此步骤可以删除：https://git.io/JLBbA
    - name: 使工件位置 URI 变为相对
      continue-on-error: true
      run: |
        echo "$(
          jq \
            --arg github_workspace ${{ github.workspace }} \
            '. | ( .runs[].results[].locations[].physicalLocation.artifactLocation.uri |= if test($github_workspace) then .[($github_workspace | length | . + 1):] else . end )' \
            ${{ github.workspace }}/detekt.sarif.json
        )" > ${{ github.workspace }}/detekt.sarif.json

    # 使用 upload-sarif 操作将结果上传到 GitHub 存储库
    - uses: github/codeql-action/upload-sarif@v2
      with:
        # SARIF 文件的路径，相对于存储库的根目录
        sarif_file: ${{ github.workspace }}/detekt.sarif.json
        checkout_path: ${{ github.workspace }}
