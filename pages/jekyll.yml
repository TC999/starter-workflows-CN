# 该工作流使用 GitHub 未认证的操作。
# 这些操作由第三方提供，并受独立的服务条款、隐私政策和支持文档约束。

# 构建并部署 Jekyll 站点到 GitHub Pages 的示例工作流
name: 部署 Jekyll 站点到 Pages

on:
  # 在推送到默认分支时运行
  push:
    branches: [$default-branch]

  # 允许您从“操作”选项卡手动运行此工作流
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 仅允许一个并发部署，跳过在进行中的运行和最新排队运行之间的运行。
# 但是，不要取消进行中的运行，因为我们希望允许这些生产部署完成。
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 构建作业
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出
        uses: actions/checkout@v3
      - name: 设置 Ruby
        uses: ruby/setup-ruby@55283cc23133118229fd3f97f9336ee23a179fcf # v1.146.0
        with:
          ruby-version: '3.1' # 如果有 .ruby-version 文件，则不需要此项
          bundler-cache: true # 运行 'bundle install' 并自动缓存已安装的 gem
          cache-version: 0 # 如果需要重新下载缓存的 gem，则递增此数字
      - name: 设置 Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: 使用 Jekyll 构建
        # 默认输出到 './_site' 目录
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: 上传构建产物
        # 默认情况下，自动上传位于 './_site' 目录的产物
        uses: actions/upload-pages-artifact@v2

  # 部署作业
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
