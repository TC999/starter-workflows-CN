# 这个工作流将在推送到 $default-branch 分支时构建一个Docker容器，并将其发布和部署到腾讯云容器服务（TKE）。
#
# 要配置这个工作流：
#
# 1. 确保您的存储库包含为您的腾讯云容器服务集群配置的必要文件，
#    包括deployment.yml、kustomization.yml、service.yml等。
#
# 2. 在您的工作区设置机密：
#    - TENCENT_CLOUD_SECRET_ID 设置为腾讯云的Secret ID
#    - TENCENT_CLOUD_SECRET_KEY 设置为腾讯云的Secret Key
#    - TENCENT_CLOUD_ACCOUNT_ID 设置为腾讯云的账户ID
#    - TKE_REGISTRY_PASSWORD 设置为TKE的镜像仓库密码
#
# 3. 更改以下环境变量（TKE_IMAGE_URL、TKE_REGION、TKE_CLUSTER_ID和DEPLOYMENT_NAME）的值。

name: Tencent Kubernetes Engine

on:
  push:
    branches: [ $default-branch ]

# 环境变量适用于此工作流中的所有作业和步骤
env:
  TKE_IMAGE_URL: ccr.ccs.tencentyun.com/demo/mywebapp
  TKE_REGION: ap-guangzhou
  TKE_CLUSTER_ID: cls-mywebapp
  DEPLOYMENT_NAME: tke-test

permissions:
  contents: read

jobs:
  setup-build-publish-deploy:
    name: 设置、构建、发布和部署
    runs-on: ubuntu-latest
    environment: production
    steps:

    - name: 检出
      uses: actions/checkout@v3

    # 构建
    - name: 构建Docker镜像
      run: |
        docker build -t ${TKE_IMAGE_URL}:${GITHUB_SHA} .

    - name: 登录TKE镜像仓库
      run: |
        docker login -u ${{ secrets.TENCENT_CLOUD_ACCOUNT_ID }} -p '${{ secrets.TKE_REGISTRY_PASSWORD }}' ${TKE_IMAGE_URL}

    # 将Docker镜像推送到TKE镜像仓库
    - name: 发布
      run: |
        docker push ${TKE_IMAGE_URL}:${GITHUB_SHA}

    - name: 设置Kustomize
      run: |
        curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    - name: 设置连接TKE集群的~/.kube/config
      uses: TencentCloud/tke-cluster-credential-action@v1
      with:
        secret_id: ${{ secrets.TENCENT_CLOUD_SECRET_ID }}
        secret_key: ${{ secrets.TENCENT_CLOUD_SECRET_KEY }}
        tke_region: ${{ env.TKE_REGION }}
        cluster_id: ${{ env.TKE_CLUSTER_ID }}

    - name: 切换到TKE上下文
      run: |
        kubectl config use-context ${TKE_CLUSTER_ID}-context-default

    # 将Docker镜像部署到TKE集群
    - name: 部署
      run: |
        ./kustomize edit set image ${TKE_IMAGE_URL}:${GITHUB_SHA}
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/${DEPLOYMENT_NAME}
        kubectl get services -o wide
