# 这个工作流会在将代码提交到默认分支时构建并推送一个PHP应用到Azure Web App。

# 这个工作流假定你已经创建了目标Azure App Service Web应用程序。
# 有关说明，请参见https://docs.microsoft.com/zh-cn/azure/app-service/quickstart-php?pivots=platform-linux

# 要配置这个工作流：

# 1. 下载你的Azure Web App的发布配置文件。你可以从Azure门户中Web App的“概述”页面下载此文件。
#    更多信息：https://docs.microsoft.com/zh-cn/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials

# 2. 在你的存储库中创建一个名为AZURE_WEBAPP_PUBLISH_PROFILE的密钥，将发布配置文件的内容粘贴为密钥的值。
#    获取发布配置文件的说明请参见：https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret

# 3. 更改AZURE_WEBAPP_NAME的值。如果需要，下面还可以更改AZURE_WEBAPP_PACKAGE_PATH和PHP_VERSION环境变量的值。

# 有关GitHub Actions for Azure的更多信息：https://github.com/Azure/Actions
# 有关Azure Web Apps Deploy操作的更多信息：https://github.com/Azure/webapps-deploy
# 若要使用GitHub Actions工作流进行Azure部署的更多示例，请访问：https://github.com/Azure/actions-workflow-samples

name: 构建并部署PHP应用到Azure Web App

on:
  push:
    branches: [ $default-branch ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: 你的应用名称    # 设置为你的应用程序的名称
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # 设置为你的Web应用项目的路径，默认为存储库根目录
  PHP_VERSION: '8.x'                  # 设置要使用的PHP版本

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: 设置PHP
        uses: shivammathur/setup-php@7c0b4c8c8ebed23eca9ec2802474895d105b11bc
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: 检查是否存在 composer.json
        id: check_files
        uses: andstor/file-existence-action@87d74d4732ddb824259d80c8a508c0124bf1c673
        with:
          files: 'composer.json'

      - name: 获取Composer缓存目录
        id: composer-cache
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: 为更快的安装设置依赖缓存
        uses: actions/cache@v3
        if: steps.check_files.outputs.files_exists == 'true'
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: 如果存在 composer.json 则运行 composer install
        if: steps.check_files.outputs.files_exists == 'true'
        run: composer validate --no-check-publish && composer install --prefer-dist --no-progress

      - name: 为部署任务上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: php-app
          path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: 从构建任务下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: php-app

      - name: '部署到Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .
